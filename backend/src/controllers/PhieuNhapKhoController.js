const PhieuNhapKhoModel = require('../models/PhieuNhapKhoModel');
const pool = require('../utils/connectDB');

class PhieuNhapKhoController {

    // L·∫•y t·∫•t c·∫£ phi·∫øu nh·∫≠p
    async getAllPhieuNhap(req, res) {
        try {
            const data = await PhieuNhapKhoModel.getAll();
            res.status(200).json(data);
        } catch (error) {
            res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch phi·∫øu nh·∫≠p', error });
        }
    }

    // L·∫•y phi·∫øu nh·∫≠p theo ID
    async getPhieuNhapById(req, res) {
        const { id } = req.params;
        try {
            const data = await PhieuNhapKhoModel.getPhieuNhapById(id);
            if (data.length === 0) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu nh·∫≠p' });
            }
            res.status(200).json(data);
        } catch (error) {
            res.status(500).json({ message: 'L·ªói khi l·∫•y phi·∫øu nh·∫≠p', error });
        }
    }

    // T·∫°o phi·∫øu nh·∫≠p
    async createPhieuNhap(req, res) {
        try {
            const newPhieuNhap = req.body;
            const result = await PhieuNhapKhoModel.createPhieuNhap(newPhieuNhap);
            res.status(201).json({ message: 'T·∫°o phi·∫øu nh·∫≠p th√†nh c√¥ng', ...result });
        } catch (error) {
            res.status(500).json({ message: 'L·ªói khi t·∫°o phi·∫øu nh·∫≠p', error });
        }
    }

    // C·∫≠p nh·∫≠t phi·∫øu nh·∫≠p
    async updatePhieuNhap(req, res) {
        try {
            const { id } = req.params; // L·∫•y ID t·ª´ URL
            const updatedPhieuNhap = req.body; // L·∫•y d·ªØ li·ªáu t·ª´ request body
    
            const result = await PhieuNhapKhoModel.updatePhieuNhap(id, updatedPhieuNhap);
            
            res.status(200).json({ message: 'C·∫≠p nh·∫≠t phi·∫øu nh·∫≠p th√†nh c√¥ng', ...result });
        } catch (error) {
            res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t phi·∫øu nh·∫≠p', error });
        }
    }
    

    // X√≥a phi·∫øu nh·∫≠p
    async deletePhieuNhap(req, res) {
        const { id } = req.params;
        try {
            const phieunhap = await PhieuNhapKhoModel.getPhieuNhapById(id);
    
            if (!phieunhap) { 
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu nh·∫≠p' });
            }
    
            if (phieunhap.TrangThai === 'DaNhap') { // Ki·ªÉm tra ƒë√∫ng thu·ªôc t√≠nh c·ªßa object
                return res.status(400).json({ message: 'Kh√¥ng th·ªÉ x√≥a phi·∫øu nh·∫≠p ƒë√£ nh·∫≠p h√†ng' });
            }
    
            await PhieuNhapKhoModel.deletePhieuNhap(id);
            res.status(200).json({ message: 'X√≥a phi·∫øu nh·∫≠p th√†nh c√¥ng' });
        } catch (error) {
            res.status(500).json({ message: 'L·ªói khi x√≥a phi·∫øu nh·∫≠p', error });
        }
    }
    

    async approvePhieuNhap (req, res)  {
    const { id } = req.params; // L·∫•y MaPhieuNhap t·ª´ request
    const connection = await pool.getConnection();

    try {
        await connection.beginTransaction();

        const phieuNhap = await PhieuNhapKhoModel.getPhieuNhapById(id);
        if (!phieuNhap) {
            await connection.rollback();
            return res.status(404).json({ message: 'Phi·∫øu nh·∫≠p kh√¥ng t·ªìn t·∫°i' });
        }

        if (phieuNhap.TrangThai === 'DaNhap') {
            await connection.rollback();
            return res.status(400).json({ message: 'Phi·∫øu nh·∫≠p ƒë√£ ƒë∆∞·ª£c duy·ªát tr∆∞·ªõc ƒë√≥' });
        }

        if (phieuNhap.TrangThai === 'Huy') {
            await connection.rollback();
            return res.status(400).json({ message: 'Phi·∫øu nh·∫≠p ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥' });
        }

        for (let item of phieuNhap.ChiTietPhieuNhaps) {
            await PhieuNhapKhoModel.updateSanPhamSoLuong(item.MaSP, item.SoLuong);
        }

        await PhieuNhapKhoModel.updateTrangThaiPhieuNhap(id, 'DaNhap');

        await connection.commit();
        res.json({ message: 'Phi·∫øu nh·∫≠p ƒë√£ ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng' });
    } catch (error) {
        await connection.rollback();
        console.error(error);
        res.status(500).json({ message: 'L·ªói khi duy·ªát phi·∫øu nh·∫≠p' });
    } finally {
        connection.release();
    }

}

    async cancelPhieuNhap  (req, res) {
    const { id } = req.params;
    const connection = await pool.getConnection();

    try {
        await connection.beginTransaction();

        const phieuNhap = await PhieuNhapKhoModel.getPhieuNhapById(id);
        if (!phieuNhap) {
            await connection.rollback();
            return res.status(404).json({ message: 'Phi·∫øu nh·∫≠p kh√¥ng t·ªìn t·∫°i' });
        }

        if (phieuNhap.TrangThai === 'Huy') {
            await connection.rollback();
            return res.status(400).json({ message: 'Phi·∫øu nh·∫≠p ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥' });
        }

        if (phieuNhap.TrangThai === 'DaNhap') {
            // N·∫øu ƒë√£ nh·∫≠p h√†ng, c·∫ßn tr·ª´ l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
            for (let item of phieuNhap.ChiTietPhieuNhaps) {
                await PhieuNhapKhoModel.updateSanPhamSoLuong(item.MaSP, -item.SoLuong, connection);
            }
        }

        await PhieuNhapKhoModel.updateTrangThaiPhieuNhap(id, 'Huy', connection);

        await connection.commit();
        res.json({ message: 'Phi·∫øu nh·∫≠p ƒë√£ b·ªã h·ªßy th√†nh c√¥ng' });
    } catch (error) {
        await connection.rollback();
        console.error(error);
        res.status(500).json({ message: 'L·ªói khi h·ªßy phi·∫øu nh·∫≠p' });
    } finally {
        connection.release();
    }
}

async SearchPhieuNhapTrangThai(req, res) {
    const { TrangThai } = req.query;

    if (!TrangThai) {
        return res.status(400).json({ message: 'Thi·∫øu tr·∫°ng th√°i phi·∫øu nh·∫≠p' });
    }

    try {
        console.log('üü¢ Tr·∫°ng th√°i nh·∫≠n ƒë∆∞·ª£c:', TrangThai);
        const data = await PhieuNhapKhoModel.searchPhieuNhapTrangThai(TrangThai);
        res.status(200).json(data);
    } catch (error) {
        console.error('üî¥ L·ªói chi ti·∫øt:', error);  // Log l·ªói ƒë·∫ßy ƒë·ªß
        res.status(500).json({ 
            message: 'L·ªói khi l·∫•y danh s√°ch phi·∫øu nh·∫≠p', 
            error: error.message,  // Tr·∫£ v·ªÅ n·ªôi dung l·ªói
            stack: error.stack  // Th√™m stack trace ƒë·ªÉ d·ªÖ debug
        });
    }
}




}

module.exports = new PhieuNhapKhoController;
