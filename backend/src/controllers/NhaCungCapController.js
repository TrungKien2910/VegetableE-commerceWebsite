const NhaCungCap = require('../models/NhaCungCapModel');
const { upload, deleteImage } = require('../utils/upload');


class NhaCungCapController {

    async getAllNhaCungCap(req, res) {
        try {
            const nhaCungCap = await NhaCungCap.getAll();

            if (!nhaCungCap || nhaCungCap.length === 0) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p n√†o" });
            }

            const host = `${req.protocol}://${req.get('host')}`;

            const updatedNhaCungCap = nhaCungCap.map(ncc => ({
                ...ncc,
                HinhAnh: ncc.HinhAnh ? `${host}${ncc.HinhAnh}` : null
            }));

            res.status(200).json(updatedNhaCungCap);
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch nh√† cung c·∫•p:", error);
            res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch nh√† cung c·∫•p" });
        }
    }
    
    async createNhaCungCap(req, res) {
        try {
            const { TenNCC, SoDienThoai, Email, DiaChi } = req.body;
            const HinhAnh = req.file ? `/uploads/${req.file.filename}` : null;

            // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            if (!TenNCC || !SoDienThoai || !Email || !DiaChi) {
                if (HinhAnh) deleteImage(HinhAnh); // X√≥a ·∫£nh n·∫øu ƒë√£ t·∫£i l√™n
                return res.status(400).json({ message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin nh√† cung c·∫•p' });
            }

            // Ki·ªÉm tra nh√† cung c·∫•p ƒë√£ t·ªìn t·∫°i ch∆∞a
            const nhaCungCapTonTai = await NhaCungCap.checkNhaCungCap(TenNCC, Email, SoDienThoai, -1);
            if (nhaCungCapTonTai.length > 0) {
                if (HinhAnh) deleteImage(HinhAnh);
                return res.status(400).json({ message: 'Nh√† cung c·∫•p ƒë√£ t·ªìn t·∫°i ho·∫∑c s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email ƒë√£ t·ªìn t·∫°i' });
            }

            // T·∫°o nh√† cung c·∫•p m·ªõi
            const newNhaCungCap = { TenNCC, SoDienThoai, Email, DiaChi, HinhAnh };
            const createdNhaCungCap = await NhaCungCap.createNhaCungCap(newNhaCungCap);

            res.status(201).json({
                message: 'T·∫°o nh√† cung c·∫•p th√†nh c√¥ng',
                nhacungcap: { id: createdNhaCungCap.insertId, ...newNhaCungCap }
            });
        } catch (error) {
            console.error("L·ªói khi t·∫°o nh√† cung c·∫•p:", error);
            res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi t·∫°o nh√† cung c·∫•p" });
        }
    }

    async updateNhaCungCap(req, res) {
        try {
            const id = req.params.id;
            if (!id) return res.status(400).json({ message: "Thi·∫øu ID nh√† cung c·∫•p" });
    
            const { TenNCC, SoDienThoai, Email, DiaChi } = req.body;
            let HinhAnhMoi = req.file ? `/uploads/${req.file.filename}` : null;
    console.log(HinhAnhMoi);
            // L·∫•y th√¥ng tin nh√† cung c·∫•p hi·ªán t·∫°i
            const nhaCungCapHienTai = await NhaCungCap.getNhaCungCapById(id);
            if (!nhaCungCapHienTai) {
                if (HinhAnhMoi) deleteImage(HinhAnhMoi); // X√≥a ·∫£nh n·∫øu ƒë√£ upload nh∆∞ng kh√¥ng t√¨m th·∫•y NCC
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p" });
            }
    
            // Ki·ªÉm tra tr√πng l·∫∑p (kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi nh√† cung c·∫•p kh√°c)
            const nhaCungCapTonTai = await NhaCungCap.checkNhaCungCap(TenNCC, Email, SoDienThoai, id);
            if (nhaCungCapTonTai.length > 0) {
                if (HinhAnhMoi) deleteImage(HinhAnhMoi); // X√≥a ·∫£nh n·∫øu b·ªã tr√πng l·∫∑p
                return res.status(400).json({ message: "Nh√† cung c·∫•p ƒë√£ t·ªìn t·∫°i ho·∫∑c s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email ƒë√£ t·ªìn t·∫°i" });
            }

    
            // Ki·ªÉm tra xem c√≥ c·∫ßn c·∫≠p nh·∫≠t ·∫£nh kh√¥ng
            let HinhAnhCapNhat = nhaCungCapHienTai[0].HinhAnh; // Gi·ªØ nguy√™n ·∫£nh c≈© m·∫∑c ƒë·ªãnh
            if (HinhAnhMoi !== null) { 
                if (HinhAnhCapNhat) deleteImage(HinhAnhCapNhat); // N·∫øu c√≥ ·∫£nh m·ªõi, x√≥a ·∫£nh c≈©
                HinhAnhCapNhat = HinhAnhMoi; // C·∫≠p nh·∫≠t ·∫£nh m·ªõi
            }
    
            // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
            const supplierData = {
                TenNCC: TenNCC !== undefined ? TenNCC : nhaCungCapHienTai.TenNCC,
            SoDienThoai: SoDienThoai !== undefined ? SoDienThoai : nhaCungCapHienTai.SoDienThoai,
            Email: Email !== undefined ? Email : nhaCungCapHienTai.Email,
            DiaChi: DiaChi !== undefined ? DiaChi : nhaCungCapHienTai.DiaChi,
            HinhAnh: HinhAnhCapNhat
            };
    
            // C·∫≠p nh·∫≠t v√†o CSDL
            await NhaCungCap.updateNhaCungCap(id, supplierData);
    
            res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", nhacungcap: supplierData });
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t nh√† cung c·∫•p:", error);
            res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t nh√† cung c·∫•p" });
        }
    }
    
    

    async deleteNhaCungCap(req, res) {
        try {
            const id = req.params.id;
            if (!id) return res.status(400).json({ message: "Thi·∫øu ID nh√† cung c·∫•p" });

            // L·∫•y th√¥ng tin nh√† cung c·∫•p t·ª´ CSDL
            const nhaCungCap = await NhaCungCap.getNhaCungCapById(id);
            if (!nhaCungCap) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p" });
            }
            console.log("üõ† ƒê∆∞·ªùng d·∫´n ·∫£nh tr∆∞·ªõc khi x√≥a:", nhaCungCap[0].HinhAnh);

            // X√≥a ·∫£nh n·∫øu c√≥
            if (nhaCungCap[0].HinhAnh) {
                deleteImage(nhaCungCap[0].HinhAnh);
            }

            // X√≥a nh√† cung c·∫•p kh·ªèi CSDL
            await NhaCungCap.deleteNhaCungCap(id);

            res.status(200).json({ message: "X√≥a nh√† cung c·∫•p th√†nh c√¥ng" });
        } catch (error) {
            console.error("L·ªói khi x√≥a nh√† cung c·∫•p:", error);
            res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi x√≥a nh√† cung c·∫•p" });
        }
    }

    async getNhaCungCapById(req, res) {
        try {
            const id = req.params.id;
            const nhacungcap = await NhaCungCap.getNhaCungCapById(id);

              // Th√™m ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß cho ·∫£nh
              const host = `${req.protocol}://${req.get('host')}`; // L·∫•y domain c·ªßa API
              const updatedNhaCungCap = nhacungcap.map(ncc => ({
                  ...ncc,
                  HinhAnh: ncc.HinhAnh ? `${host}${ncc.HinhAnh}` : null
              }));
      
              res.status(200).json(updatedNhaCungCap);
        }
        catch (error) {
            console.error("L·ªói khi l·∫•y th√¥ng tin nh√† cung c·∫•p:", error);
            res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin nh√† cung c·∫•p" });      
          }
    }


}

module.exports = new NhaCungCapController;
module.exports.upload = upload;
